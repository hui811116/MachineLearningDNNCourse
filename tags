!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DNN	src/dnn.cpp	/^DNN::DNN():_pData(NULL), _learningRate(0.001), _method(ALL){}$/;"	f	class:DNN
DNN	src/dnn.cpp	/^DNN::DNN(Dataset* pData, float learningRate, const vector<size_t>& v, Method method):_pData(pData), _learningRate(learningRate), _method(method){$/;"	f	class:DNN
Dataset	src/dataset.cpp	/^Dataset::Dataset(){$/;"	f	class:Dataset
Dataset	src/dataset.cpp	/^Dataset::Dataset(const Dataset& data){};$/;"	f	class:Dataset
Dataset	src/dataset.cpp	/^Dataset::Dataset(const char* trainPath, size_t trainDataNum, const char* testPath, size_t testDataNum, const char* labelPath, size_t labelDataNum, size_t labelNum, size_t inputDim, size_t outputDim, size_t phonemeNum){$/;"	f	class:Dataset
MAX_EPOCH	src/dnn.cpp	12;"	d	file:
NameFtreMap	src/dataset.cpp	/^typedef map<string, mapData> NameFtreMap;$/;"	t	file:
PARSER	src/parser.cpp	/^PARSER::PARSER(){$/;"	f	class:PARSER
PARSER	src/parser.cpp	/^PARSER::PARSER(const PARSER& p){$/;"	f	class:PARSER
addMust	src/parser.cpp	/^void PARSER::addMust(string name,bool isNum){$/;"	f	class:PARSER
addOption	src/parser.cpp	/^void PARSER::addOption(string name,bool isNum){$/;"	f	class:PARSER
backPropagate	src/dnn.cpp	/^void DNN::backPropagate(const mat& deltaMat, float learningRate){$/;"	f	class:DNN
computeErrRate	src/dnn.cpp	/^float computeErrRate(const vector<size_t>& ans, const vector<size_t>& output){$/;"	f
computeLabel	src/dnn.cpp	/^void computeLabel(vector<size_t>& result,const mat& outputMat){$/;"	f
dataSegment	src/datasetJason.cpp	/^void Dataset::dataSegment( float trainProp ){$/;"	f	class:Dataset
feedForward	src/dnn.cpp	/^void DNN::feedForward(mat& outputMat, const mat& inputMat, bool train){$/;"	f	class:DNN
find	src/parser.cpp	/^TYPE PARSER::find(string name){$/;"	f	class:PARSER
getBatch	src/datasetJason.cpp	/^void Dataset::getBatch(int batchSize, mat& batch, mat& batchLabel){$/;"	f	class:Dataset
getInputDim	src/dataset.cpp	/^size_t Dataset::getInputDim(){ return _featureDimension; }$/;"	f	class:Dataset
getInputDimension	src/dnn.cpp	/^size_t DNN::getInputDimension(){$/;"	f	class:DNN
getLabelMap	src/dataset.cpp	/^map<string, int> Dataset::getLabelMap(){return _labelMap;}$/;"	f	class:Dataset
getNum	src/parser.cpp	/^bool PARSER::getNum(string name,float& num){$/;"	f	class:PARSER
getNum	src/parser.cpp	/^bool PARSER::getNum(string name,int& num){$/;"	f	class:PARSER
getNum	src/parser.cpp	/^bool PARSER::getNum(string name,size_t& num){$/;"	f	class:PARSER
getNumLayers	src/dnn.cpp	/^size_t DNN::getNumLayers(){$/;"	f	class:DNN
getNumOfLabel	src/dataset.cpp	/^size_t Dataset::getNumOfLabel(){return _numOfLabel;}$/;"	f	class:Dataset
getNumOfPhoneme	src/dataset.cpp	/^size_t Dataset::getNumOfPhoneme(){return _numOfPhoneme;}$/;"	f	class:Dataset
getNumOfTestData	src/dataset.cpp	/^size_t Dataset::getNumOfTestData(){return _numOfTestData;}$/;"	f	class:Dataset
getNumOfTrainData	src/dataset.cpp	/^size_t Dataset::getNumOfTrainData(){ return _numOfTrainData; }$/;"	f	class:Dataset
getOutputDim	src/dataset.cpp	/^size_t Dataset::getOutputDim(){return _stateDimension;}$/;"	f	class:Dataset
getOutputDimension	src/dnn.cpp	/^size_t DNN::getOutputDimension(){$/;"	f	class:DNN
getString	src/parser.cpp	/^bool PARSER::getString(string name,string& str){$/;"	f	class:PARSER
getTestDataMatrix	src/dataset.cpp	/^float** Dataset::getTestDataMatrix(){return _testDataMatrix;}$/;"	f	class:Dataset
getTestSet	src/dataset.cpp	/^mat Dataset::getTestSet(){$/;"	f	class:Dataset
getTo39PhonemeMap	src/dataset.cpp	/^map<string, string> Dataset::getTo39PhonemeMap(){return _To39PhonemeMap;}$/;"	f	class:Dataset
getTrainDataMatrix	src/dataset.cpp	/^float** Dataset::getTrainDataMatrix(){return _trainDataMatrix;}$/;"	f	class:Dataset
getTrainSet	src/datasetJason.cpp	/^void Dataset::getTrainSet(int trainSize, mat& trainData, vector<size_t>& trainLabel){$/;"	f	class:Dataset
getTrainSize	src/dataset.cpp	/^int    Dataset::getTrainSize(){return _trainSize;}$/;"	f	class:Dataset
getValidSet	src/datasetJason.cpp	/^void Dataset::getValidSet(int validSize, mat& validData, vector<size_t>& validLabel){$/;"	f	class:Dataset
getValidSize	src/dataset.cpp	/^int    Dataset::getValidSize(){return _validSize;}$/;"	f	class:Dataset
inputFeature	src/dataset.cpp	/^	float* inputFeature;$/;"	m	struct:mapData	file:
inputFtreToMat	src/datasetJason.cpp	/^mat Dataset::inputFtreToMat(float** input, int r, int c){$/;"	f	class:Dataset
isNum	src/parser.cpp	/^bool PARSER::isNum(string str){$/;"	f	class:PARSER
load	src/dnn.cpp	/^void DNN::load(const string& fn){$/;"	f	class:DNN
loadTo39PhonemeMap	src/dataset.cpp	/^void Dataset::loadTo39PhonemeMap(const char* mapFilePath){$/;"	f	class:Dataset
main	jasonTest.cpp	/^int main(){$/;"	f
main	temp.cpp	/^int main(int argc, char** argv){$/;"	f
main	testPredictOutput.cpp	/^int main(int argc, char**argv){$/;"	f
main	train.cpp	/^int main(int argc,char** argv){$/;"	f
mapData	src/dataset.cpp	/^struct mapData {$/;"	s	file:
mat	jasonTest.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	src/datasetJason.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	src/dnn.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	src/nnTrain.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	temp.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	testPredictOutput.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
myUsage	train.cpp	/^void myUsage(){cerr<<"$cmd [inputfile] [testfile] [labelfile] --labeldim [] --phonenum [] --trainnum [] --testnum [] --labelnum [] --inputdim [] --outputdim [] --maxEpoch []"<<endl;}$/;"	f
nnTrain	src/nnTrain.cpp	/^DNN nnTrain( Dataset* dataPtr, $/;"	f
outputNumtoBin	src/datasetJason.cpp	/^mat Dataset::outputNumtoBin(int* outputVector, int vectorSize)$/;"	f	class:Dataset
parseOneOption	src/parser.cpp	/^bool PARSER::parseOneOption(string& str){$/;"	f	class:PARSER
parseOptions	src/parser.cpp	/^void PARSER::parseOptions(string str,vector<string>& vout){$/;"	f	class:PARSER
phoneme	src/dataset.cpp	/^	size_t phoneme;$/;"	m	struct:mapData	file:
predict	src/dnn.cpp	/^void DNN::predict(vector<size_t>& result, const mat& inputMat){$/;"	f	class:DNN
print	src/parser.cpp	/^void PARSER::print()const{$/;"	f	class:PARSER
printLabelMap	src/dataset.cpp	/^void   Dataset::printLabelMap(map<string, int> Map){$/;"	f	class:Dataset
printTo39PhonemeMap	src/dataset.cpp	/^void Dataset::printTo39PhonemeMap(map<string, string> Map){$/;"	f	class:Dataset
prtPointer	src/datasetJason.cpp	/^void Dataset::prtPointer(float** input, int r, int c){$/;"	f	class:Dataset
read	src/parser.cpp	/^bool PARSER::read(int argc,char** argv){$/;"	f	class:PARSER
read	src/parser.cpp	/^bool PARSER::read(string spec){$/;"	f	class:PARSER
save	src/dnn.cpp	/^void DNN::save(const string& fn){$/;"	f	class:DNN
saveCSV	src/dataset.cpp	/^void Dataset::saveCSV(vector<size_t> testResult){$/;"	f	class:Dataset
setDataset	src/dnn.cpp	/^void DNN::setDataset(Dataset* pData){$/;"	f	class:DNN
setLearningRate	src/dnn.cpp	/^void DNN::setLearningRate(float learningRate){$/;"	f	class:DNN
start	src/parser.cpp	/^bool PARSER::start(vector<string> vx){$/;"	f	class:PARSER
str2Num	src/parser.cpp	/^float PARSER::str2Num(string str){$/;"	f	class:PARSER
toUpperCase	src/parser.cpp	/^string PARSER::toUpperCase(string str){$/;"	f	class:PARSER
train	src/dnn.cpp	/^void DNN::train(size_t batchSize, size_t maxEpoch = MAX_EPOCH, size_t trainSetNum = 10000, size_t validSetNum = 10000){$/;"	f	class:DNN
~DNN	src/dnn.cpp	/^DNN::~DNN(){$/;"	f	class:DNN
~Dataset	src/dataset.cpp	/^Dataset::~Dataset(){$/;"	f	class:Dataset
~PARSER	src/parser.cpp	/^PARSER::~PARSER(){}$/;"	f	class:PARSER
